apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:8.0.6
          ports:
            - containerPort: 3000
          env:
            - name: GF_SECURITY_ADMIN_USER
              value: admin
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-secret
                  key: GFSECURITYADMINPASSWORD
            - name: GF_SERVER_PROTOCOL
              value: https
            - name: GF_SERVER_CERT_FILE
              value: /etc/grafana/ssl/grafana.crt
            - name: GF_SERVER_CERT_KEY
              value: /etc/grafana/ssl/grafana.key
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-loadbalancer
  namespace: default
spec:
  type: LoadBalancer
  ports:
    - name: https
      port: 443
      targetPort: 3000
      protocol: TCP
  selector:
    app: grafana
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      containers:
        - name: postgresql
          image: postgres:13
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: grafanadb
            - name: POSTGRES_USER
              value: grafanauser
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: postgres-password
---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: default
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
  selector:
    app: postgresql
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: example-com-certificate
  namespace: default
spec:
  secretName: example-com-tls
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  commonName: "example.com"
  dnsNames:
    - "example.com"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: example-com-ingress
  namespace: default
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  rules:
  - host: "example.com"
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: grafana-loadbalancer
            port:
              number: 3000
  tls:
  - hosts:
    - "example.com"
    secretName: example-com-tls
